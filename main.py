#PatternCount(Text, Pattern)
#        count ← 0
 #       for i ← 0 to |Text| − |Pattern|
#            if Text(i, |Pattern|) = Pattern
#                count ← count + 1
#        return count

def PatternCount(text, pattern):
  count = 0
  
  for i in range (len(text)-len(pattern)+1):
    #print (i)
    #print (text[i:len(pattern)] + 'and' + pattern)
    if text[i:(i+len(pattern))] == pattern:
      count = count + 1
      #print (count)
  return count


def Check(text, pattern):
  if (text[0:len(pattern)] == pattern):
    print ('Yes')

#Check('GCGCG', 'GCG')


text = 'CCTGGCGGGTATATGGGTATAGGGTATACAAGCGCTGGGTATATCGAAGGGGTATAAGGGTATACCGAGGGGTATAGGGTATAGTTAGGGTATAAGGGTATAAGGGTATATGGGTATAAGGGTATAAACGGGGTATAGGGTATATGGGTATAGTGGGTATAGGGTATAATGGGTATACGGGTATATATACTATGGGTATACGAGCGGGGTATAATGGGTATAGGGTATAGCGGGGTATAATGGGTATACAGGGGTATAGGGTATATGGGTATAGGGTATATGGGGTATATCGGGTATAAGGGTATAGCAACGAGGGTATATGGGTATAGACGGGTATACGGGTATAGGGGTATACAGGGTATAACCGGGGTATATCGGGTATAAGGGTATAGGGGGTATATGGGTATAGTGGGTATAGGGTATATCGGGTATACTCCATCGCGGGTATAGGGTATAGGGTATAATAATGGGTATAGGGTATACTGGGTATATTATCCCAAGGGGTATACAAGGGTATAGTCTGGGTATAGTGCATCAGGGTATATTGGGTATAGGGTATAGGGTATATGTGTTCTGGGTATAGGGTATATGGGTATAGGGTATATCGGGGTATAGGACGGGTATAGCCCCGAAGGGTATAGGGGTATAACGGGTATACGGGGTATAGGGTATATCGGGGTATACGGGTATAGGGGTATAACCGAGGGTATACCATGGGTATAGCGGGGTATAGGGTATATTGGGTATAGGGTATACCACCTTCGGGTATAGGAGGGTATACAGTGGGTATATGGGTATAGGGGTATACGGGTATAGTGGGGTATAGGGTATATGATATAGGGTATACCCTGATGGGTATAGGGTATATTGCCGGGTATAAGGGTATAATCTGGGGTATAGGGTATAGGGTATAGGGTATAGTGGGGTATATGGGTATAGTAACATTTGGGTATATTCGTGGGTATAGGGTATAGAGTGGGTATACGGGTATAGCTTGCGGGTATATGGGTATAGCTGGGTATAGCAGCGCTACGGGGGTATA'
pattern = 'GGGTATAGG'


print ('Count is ' ) 
print (PatternCount(text, pattern))

   # FrequentWords(Text, k)
       # FrequentPatterns ← an empty set
       #    maxCount ← maximum value in array Count
      #  for i ← 0 to |Text| − k
   #              add Text(i, k) to FrequentPatterns
 #       remove duplicates from FrequentPatterns
    #    return FrequentPatterns



# Frequency Part
def FrequencyWords:
  from collections import Counter
  seq = 'TTCCGTCTAATTCCGTCTAACCTTGTCTGATGATGTATGTAAGTTGGTGATGTATTGATGTATTGATGTATTACTCTACGCGTAAGTTGGTACTCTACGCTACTCTACGCGTAAGTTGGGTAAGTTGGCCTTGTCTGAGTAAGTTGGTTCCGTCTAATACTCTACGCTTCCGTCTAATTCCGTCTAAGTAAGTTGGGTAAGTTGGTGATGTATTACTCTACGCTTCCGTCTAAGTAAGTTGGTTCCGTCTAATGATGTATGTAAGTTGGGTAAGTTGGTTCCGTCTAACCTTGTCTGATACTCTACGCGTAAGTTGGTACTCTACGCCCTTGTCTGATGATGTATTACTCTACGCTGATGTATTGATGTATGTAAGTTGGTTCCGTCTAATACTCTACGCCCTTGTCTGATACTCTACGCGTAAGTTGGTTCCGTCTAACCTTGTCTGATACTCTACGCTGATGTATCCTTGTCTGAGTAAGTTGGGTAAGTTGGTGATGTATTGATGTATGTAAGTTGGCCTTGTCTGATACTCTACGCTACTCTACGCTGATGTATGTAAGTTGGTACTCTACGCTTCCGTCTAACCTTGTCTGATACTCTACGCCCTTGTCTGATTCCGTCTAATTCCGTCTAACCTTGTCTGATGATGTATCCTTGTCTGATTCCGTCTAACCTTGTCTGATTCCGTCTAACCTTGTCTGACCTTGTCTGATGATGTATGTAAGTTGGCCTTGTCTGATTCCGTCTAATACTCTACGCTGATGTATGTAAGTTGGGTAAGTTGGCCTTGTCTGATTCCGTCTAATTCCGTCTAAGTAAGTTGGTTCCGTCTAATTCCGTCTAATACTCTACGCGTAAGTTGGCCTTGTCTGAGTAAGTTGGTGATGTATTGATGTATTGATGTAT'
  k = 11
  print(Counter((seq[i:i+k] for i in range(len(seq)-2))))



def reverseComplimentary(text):
  output=''
  for i in text:
    if i == 'A':
      output = 'T' + output
    if i == 'T':
      output = 'A' + output
    if i == 'G':
      output = 'C'+ output
    if i == 'C':
      output = 'G' + output

  return (output)

testdata = 'GGCCAGGTAACATACTGTCCGCCCTCATCGGATAGCCTTCCTTATGTGCCTCACGAACTACGCCTCTCTTCTCAAAAAACCTCCACGATGGTCATCATGCCTTAATTTTCAATAGCCTCACTAAACGTGTACATGATTTCACGCCAAACCTACACCCCGGGAGAACTCTTAGAGACTGTATACAGCCGTTTTGTTCTTCCAAGGTAAATACTCGCGCGGAACGTTTTCATCTCGGTCGACTTCCCGTCGGCTCAATCGGACGTCAAAGACAGCCCGAATTTTCGTCTCTACCGTTTGGATATTTGAGACCGCACATACTCCATCTCTTCTCCAGTAGCACCACTCTTGAATACCGGCGGTCACCCTAAAATTAGCCCTGTATCCGGGTTATCCGCTTGCCCACATGGGTTTGAGTGTAAGGACTCTTAGTGCGTTGCGTCGCGAACTAGCAATGGCATAGTTTCGCGGTAGGCCCGTTGCCAGTTAAACAGGCTTGGTAGTGGGAGATGCAATTGATACTACACTGTGACGCCGGGATTAGCATGAACTTGGCAGGCGCTTCACGGGCCATTAGGGAGCCTGAGAGCTCACCATCTGCGAGTGTTGTTTAGTCTGCGGAGTGCGCAGGATAGTCATGTTGATTTCACTTAGCTCACAGGGGGCACCGTCACCAGCGGATGCAGCATCCTTGATTCATCGTGGCCACCTTTCGGACCATACAGGGAATCCAGAGTAGACAACAGGACGTCGGCAGCGCTCCGGCTGTGAGGAGCAAGATGCACTGCGATGATTGTCTTACTCAATGCTGCTCCATTCATTAAGAAAATTGGGATAGACCCAACCGCATTCAACCACATAGATGGTATGAGAGAAACAGCATCAAACGGTCTATGGCTGTTCTTGCTAGTGTGCCCGAGACAAATGAGGCCCTCTTCTCCGGAATTTGACAAAAAGCAGACAGCCTTCGGGTTTGTTTATGAGCCTCCGCCCTAGCGACTTTCTAGCGAGTAGAGGAAGGGGCAGGCGAATTCGACCGTAGAGGGGAACGTAATGAACCTACGTCGATCGCATACATTAATCCTTGCGTATAAGTCTGATATCGTGTATGTAAAGCCAACCCCTCCGCAACGAATAAAGCGTCGGATTGACAGGAGTGGTAAGTTCACGTATCGGGACAATAATACCGTAAAGGCGTCATACAGAGTTAGCCCAGTGTCACAGTACAGATTATCCGCATTATACCCAGACTTTGGTTCGCAATCCGCCCGCTCCTTGAACACTATGGCGGCGCGCCGACATTTTTATGCCCCGATTTTGACTCAGTTTTACTCGAAGTCTAGGGTTTACGGCACAGTCTTTGAATCTCGCTAGCTGGCACTGATTAATGCGTGAACTACTCTCTATGATTGTGCCCAGGAAATCGGATTACCGCCTCCGTTGTGGGGGAGAGGGCGGAATTCTTGCAGGGTAGAATATACCTTATGAGAGGTGGAACTGAAGTGAGATTGCTTCGCGCCTTCTACACTACTCACATAGCTCGTCGACTCTCGTAATCATAAGGGACACTTAGAACGCACAGGGGACCTCTCCTGTTAAGGTGATGACTACCCGATTGCCGTCGTGAGAAACTTGTATCCACCGGCGTCGAACTAAAAGCGGCCCTGGCTGGTGTACAAGGCTCTTCTTTACGTATCCCCTTTATAGGAAATGATGTCGACGCCGACCGAGCCCATCAATCGCGTGGCCGGACCACTACCCTACGGACTTGTGGGTGCAACAAGACAGCGATACTATGGTGTCTAGTCCGATGGGTAACGGTCGGAATACAGCCGCTTGTACAAACTCACGTGTGCGCCTAAGGTCTTTTGGTAGATAGAAAGTGGGGTACGCTGAAGCAATTGAAAGGGCTCGGTCGTAGCGAGCCAGATACTGTACCCAGCAACTAATTACATAGATCGGAGAAACTTGTACCACCATCTTGTGAATGGGAACTTACCAGGTAGAGGCTCACGCAGAGCACCCTTCAACGATAGCCTCACGATATACCCTACCACAATCCCAGTAGAATGAGTTCCGGAGTTTATCGACGCGATTGAGGATAATACTTTGATCTGACCTCTAGAATAATACCTTCTCTCGAGCGATTAGTGATTGCCACTAGCCCATTTGCTTGAAGGTGCAGTACCACGGAACCTATTGGACCCTTTGGAGCGCAAGCGATAACGGGTAACAGGGCTTACAAATAGGCCAGATACCTGTCATAGTGCATCACCATGGAGGGTCAATTCTCGCTATCATTCACGTAACGGGCTTCGTAACTGGTCCGTTGATGTAGATTCCTTCCAACGGCGAGTACCCAAGAGGATAATCGCACACTGTCAACCTCCATGGAGGAACGCCCCCTACACTCGAAATGCTGTGGTCGGTAGGGTAATGCGCTCAAGCACTACACTTGACACTACCATTTCCAGGTGGCGTATATAACTGTAGGTACTGTTCTATCCTAGGACGATAGTGCTATTGTTCGGGCGTACGCATATTCATATTTCGGCGTGGTAGATAATTTCGAAGAGGAACACGGGACCGCTTTGTATAAGACCGGACCCCACAACGAACTCAACCCAGTTTACTCCGCTAACATGTAGTAATTGCCTGATCTAACCCGGATCACCGTCGACACTGCGTGACAAGCTCAGCGTGCTGAGTTTCGCGTCCTTGGCAGTCGCACTCGTATTGAAAACACCCGCCAGAAAACGAGGTCGAGGTATTTCGGAGGGTAGATCATTTACTATTGCCGTCACGAGGCCCGCACCTCCAGCGGAGACGACAGATTTTGACATTCCAAATGTGTACCCGGTTCTGCTCTGAAGTGGCTTGGTAAGCGTTCGCGCGTCCGAGCCGCGATGCACGCTTCTAGACATTAACCCCATGCGTTTTGAAAATCGTAAGGGAATCGCTGTTCACAGAGTTGGTATGATGTTGCAGCCGACTTGTCCCAATGTCGATGAAATGCGAAATAGTAAGTACCATGAAGAGGGCGGGCGATCTTCCCGGCGCTTACTCCAAGTCCCAGTACAGGACGACATTAGCATCTACCCTCGGGCCATTGCGGAATTGTAGGCGTTATTGATTACGGGAAGCCGACAATTAAAGAATAATCTAAGTTCTGGCTGTCGATTACCCGTTCCATAACCCGATCTCTATCCTGTCTTGTCTCATTCCATATGCATTTGGGAGATATAAATTAGGTGCACGAGGGCAGCCCAGGTGCAGGCCAGACGTCCAGTTTTACCGCGCAATAGAGTGTTCGAATAATTCACAAGTTCCGCTAGAATATAAGGCATATACAAATCTTTTAACATAAGAGGAACATCCTTAGGCGGCGGCAGCCTCGAAAAAGCTGCCAAGGGAGAACTCGCCCATATCTGCGGCTTTTCCACCGATACTCGGCACTTAGCTTGGACACACCGGTTCTGTATCGAAAGCGATAATACCTAGGAAGTACTCTTGTAACTGCATAGATTACACAATAGCCACAGGGATTAAACCTTGGCTTATAAATGCAAAGCTACGCACTACTGAGCCCTGTACGTTTACCTAAAGGGGTGGCTATCATTAAAACGAGTTGCCCTTCAAAATAGATGCAACCGCTCGCTGTTTTCCGTCCGCAAAGGCTCCGGAAGAAATGTACGTCCATCTGTATATAGTAGAGTAAACTAGGATCGGGGGCCACACTTTTTCTTCGTAAGCCTAGCGTGACTAAGTGGAGTCTAAAAAAACGCACCTTAAGATAAAGGCACCGTAGATTCTCTCAGCCGTTTGTAAGTTCGGGGCAGTGCCCTCTGGGGACGGATTTTCCAGGGACAGTTTAAGAATTGTCAAAAGGCGAGATGGTGAGCCATAAATACTCGGGGAGTAAACCGATAGGCGGTCATGAGATTCTATCGGGGGACATTACAGAAGGTCTGAGAAACTCGCAGCCTTTATTACTTCTTTCCAAAGTTTGTGACGATTAGCACGAGTCTTTGTATCCCTCCCACTTAACTATGACAGGTTGCAAGGGCTGCCCTATGGCGTACTAAAACCTTCGGTCGTTTATAGCGTGAAACACATTTCGTCCTATCTGATCTATCACTTAGGGGGCAGACTGTGGGCGGAGGAATTCAGTCACCTACGGGGCTGGAGTATCCCATCTAGCTGTTTAACTCTTCAACTCGCGGACCATTCAAAACGTGAATCTCCGAACTGGAAACGATTGGCTTCATCGGACACGTCCACGGACGATCGTAGACTAGCCGGTGTCATGGGGGGCATACCGTCGCCATCTCCATTGATAACTCCCTTCATCGCAAGCGCCCGTGTTCCGAGATGAACGTTTGACCGAATTTGCCAACCTTGCACATACGCCGTCCAGGGCCTTTAATCGCCTCAAAGGTCTCGGATTAGGACTGGAGTAAAGAAGATGGACGTCAGCGTGCGACAAAAAGAGAACACCTTAGCACGTGACGCTGCTGCATGTGAGAATGCACTGATAATCCCGGAGAACTATCTCGGCTGAGTTGTTTATTGGGCACCCCCGGGCAAATAAGAGCATCAAAGCTGCAGCGTGGACATACTGGGCGACCAAAGCGAAATACAGTACGTCATTTGCAGTCGTAGGTCAACGAACCAATAGTCGAGGACCGAGACTCTGCGGCGTCAGGTCTGTAGCACGCGACTAAAGGCCTTGTCTTTGCCATAATTCGATTGTCTGTAAAGGAACAAAGCAGAAGTAGGGTCTTTAAAGTGCGAGCGGGCCGGGCGCTGGAAAGCCCTGCCAGCCCATAAGCGCGATGGCCGTCGAGCCGCCATTCATGCTGAGAGTAAGAAATGACGATGCCCGCGGACTTAATTGGACTGACGAGGGAATAATTTTACATAGGACCGAAAGGTGTGACGTCAATACTGGGGTGAGGGAAATACGGTACGCACTTAGTATGAGGGAATGGTAACGTCTTACATTCGGCCGCAGTCCGTGGCACGCGCGGCCGCCTACTATGGCTCAAGTCTTATCGTGTATCTTCTAGATATGTTTGGCCACAACCCGGTAATAGGCCCGCGGGCGCTCAAGGCGCTACAACAAACCGATTACGTCCCACATGCCAAGCTGTCTTAATCCGCCAGACCGAGTTAATCCACGGAGGAGCTAGTAGTGTTTGGCCCGGCAAGTTCCAGCAGCACTAGTAGGGCAGCAGCAACTTCTGGCAGCTCGTGGAAAGTTCTAGAGTGGATTACCTAGACCGACGGCAGTGTTTGCCTAAGAGGATAGGCTTTACAGGCGACTATGCCGGCGGAGTGCGGGTACCCGCGCACACGGCGAGGGAAGATCAATCTCATGAATGCCACTCGGCGTCTGTATATGGCCACTACTAGGTCCAGTCTAGCGCAGATCTCGTGCTGAGGCATAAAGAACGTTTTTGTCCCTAAAATCGGACATCTTCGCATGTTGATATTTAGGCCTCTCTTATGCGTGATACATACGGTAGCCTTGAATTGATATGGGACTATGAACGACATTGACGCCGTTGCTGTTGCGGCGCATGCTTGATTTCTGCTGGGCTTTACCAGGGTCACCAGCCAAAAATGTGTATGTCCCGTTTAAGTTTACACTGTGCCGTCTTGTGAGTCTACATGATAGGATAAGGTGAGATAGGTCTATTCTATCTTTGGACAGAAGTGGTGCTCCCCCGCAATCATTTTCTACCACTGAAACCTATATAATATTAGGCCAATGGACTTCGATACCTAATCACGTACCTTGTGTTCGAACGCTCTGCGTATAATAAACTGCCCTGAGCCACTTCGCGATCTGCTTAGGCTACTGGCAACTCGTAAGAGTTGCTTAGATCAACGACTTGTCTCGTTTGATACGGCTACGACTGTGGTCCGACATAATTATGAGGAGTAAGACGCGACCGGCAGGAGACTACACCTGATTATAGGCGGACCGCCTGCATCGAAAGCCGTAGGTCACGTAAACTAGTGTGTATTCAAGCGTGTTATGCTGTCTCGGTCCGTCGCTCTAGAAGACCTCCATGTTTGCGATGCTGCGACTACTCCGAATTGGGGATAAGAAGTAGTCGTCATGTCGGCTATACCATTCTCTTCTGATTACCCGTTCTATCCCGCCCAGGAGATCCTCTGCTGCAAATAGGGCATGTATTGCGCGCAGTTTGGACCATTCCGTGTATTTAGCAATCTGTAGCTCATTCTGACGGATGAGCACCGTGCCTTTGCGTGATAGTGAGATAGCGGACTAGGGTACCATGGACATTAGTAAAACCGCTTAGTACCCGGGAACTGATGATTGAGGCCGCTCCAATCTAGTCTTGTAGACACCATTTCCGGAGCTGAATATTTTTCCCCGATCAGAGAGGTCCTCTCAGGGCCACCTCAAAACGCAGAAGGGAACCCTCAATACGCTAGACTCACACTGCTTGAGTCGAATTGAGCTCAAGGCGCCAGTTCTACGAGGCGGGCGTGGTGCGTTTCCTCCCAGTTCGTGTCTTCGGATTGCACTATTACTCCTGACAATGCGCATGGACGCATTGTACCGATTTGCGCTCCGGGAGAAAGAACCTTACTACAGGTCTCTCGGGCTACTTAAAGACTTGTCCCCAAACCATTGGTAACAGCCCAAATCACACCTAAGCCCTAGTGTGGGATTAGGAATAAGCAGCTAGTTTGCGGTAGGCACACGGACTGATTCAGGAACTCAGTGTATACGTTGTACAGTTAGGCGCTTATATCCTTTTGGTCGTTGTCGACTTCAGATTCTGTCCTAGTTATTTGGTGCGTCCTTTTAAGGCCCAAATGACGACAGAACCACCACACGTGGTGTTGGATATCCGAGTACGCTGTCCTAAGATGGTGGGTAGTCGTAAGGTAATAACGTACAGCGAGTCCGCGCCATGATGTTCATACACTCATTACTGAGGCGCTGTACTTGCAATTTGCTACCTTCTGCGAGTTGGAGTGACCGACGTTAGGGTCCACTTTCCCCGGGCTTGATGCCGGCCCCCTCAATCCGAAAACCCATACGATATATTCCCAGGATTACAAGTTAATAAGTAAGACGGAGGATCGCAGGTGTCCAACCGGGCCGGTTGATATTAAGTAGCTTGTCAGTGTTGTGCGGAATTCTGCAAGCCGTGTGAAATCCAGATTAACTTTGGATTTCCAAAAGGAAATACGCAAATCCCTGCACGACCAAGATTAAGTACCGTACTTCGGGAGGAACAGCACTGAACGATGAGACAGTGAGGCCATGCGCGAGCCTATACAGTGACCATAATGACAGAAGTGGGGGCGCTTTCCGAGTGCGCGGGGAGGCACTGTGGCTGTAAACGCATGGAAGATACCGAGCGAACGAGTCGGAGCGTTGGGATCCTGGTTGGTCGATGAGCGCTGAAGCATTCGCAATTTACCTGGAATGTGCGTCACTAGGGTAGTAAAAGACTGGACACACACGAATCACAGCCGGCGACTTCAAGTAGGGATCCCCAGCCTCGTGATGATCATTGGCTTAGGCGAAGGCGGTCCCTTCTCTCCTCCCACCGTGCCCCACGGAAAGCACTAACCTACGAGATACAATGTTCTAGTCCCCACTAGAGTGCGCCGGGACCCTATTTCAGTCCACAATGGTAATGTTCTGTAGGAGGCACCTCCTTCTAGGGCTCCCCAGAAGTATTATATGACCCACTCTCTCCATGGCCATGTGTAAGCGTAAGCGATACTAGTTGCGTACACAGACTTCTATGCTATCCCGGTAAGGCCGCTGGCCTAGCAAGCCCGGTTTGTAGATTGTCACATGGCCTCTGAATCAGCCTACTATCTAGTTAGTTTATCGACCTCGTTGAGAGCGTAGAGTGTTTGTCTAGCCGCCTTAACTTAGGCTAAACCTAATCGCTGAATACAACCGCCCCCTAAACCCTTCTAGTTTTCCTAAGGTAGTCTTGCTGAACCTTGGGTCGTCTATCGCGACCTGTCGAGCTTCGATGGAAAAGGCCACTCCAATACAGTCAAGTTTCTCAACTCGCCAGTCAACAACCAGCGTCCGGCAAACATAATGGATTAAGTGCTGTAATCCCTCATACCGGTGCTTAGCTTGAAGTGATGTGACCAGATCTTGATATTTTCGGCTCACGCGGACACGAGTAATCGGCTCCTGCCTTCGCTAAACAAGTGGGACCTACGTAGTTATATTGTAATCGAAGGTGATATCCTCGGGGGTTAACAGCATGAGAGGGAACATTCCGGCGCGGATCGCCCCCTAATAAGTCGGCCCCGCAAAGGACTCCCGAGTGACACCTTCGTAATCGAAAGGCACCCATTCACATTCAGGTCCATTACCGAGTACACGGTCCCTGGCTAGTCGCTGTAAATCACGGGACTTCTTCGACTCTCAGGTCCCGTGAAAACGTGTGCACCGATCGGTGGATGTCGTGTTGGGCATAGTTCAACGTGAGCTTAATGTTTCTCTATCTTGCTTTACTCTTACGACCTGATCTGCGTGAGGCCATAGTGTCGCACAGTATGCAACGGGGCGTCGAGCGAGCGCTACCGTTTTCTATATCTCTATTCGAATACAAATTTGTTGCTCCCTAGTAGGCAGAGGACCTTCCATTTCCACTCGGTCTGCAAATCGGAAGTTAAGCACTGAGACCTTGGCCCATAATCATAGCACACGGGAAACTGACCTCGCAGTTTCTCAAATAATGCCCGTCGATCGACAGAAATCGAGATTGTTCATTGGACGGGGACCGTTGTCCAAGAACGCTCGAGGTTTGCACATGGCCGAATGCTGTTGACACAGCTTAGTCCGGACTCTCAAGGCTTAGGTTTAAGCAGATTCGTATTCCACCGCCCTTAACTCTATTACGTGTCGAAGGAGGTAAAAAATCTCGGGATATCCCAACGTTCCGAAGATGTGCGTACCACAAGCCTACGGTCAATATATTCTCGACTGAGCTTACGTGTGCGAACCACTGGTTGTGTAGATTGACTACGCACCGCCTGCTTCTATAGAGTCAAAACTATACCATGCATACA'
#print (reverseComplimentary(testdata))

# Find all positions in a string
f = open("Vibrio_cholerae.txt", "r")
Pattern = 'CTTGATCAT'
Genome = f.read()
Position = []
for i in range(len(Genome) - len(Pattern)+1):
    if Genome[i:i + len(Pattern)] == Pattern:
        Position.append(i)
print(*Position)

def clumpfinding(Genome, k, L, t):
  for i in range